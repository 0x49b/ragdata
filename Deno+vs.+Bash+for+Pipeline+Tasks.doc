Date: Wed, 24 Apr 2024 13:56:47 +0200 (CEST)
Message-ID: <403177402.8610.1713959807221@confluence-p>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_8609_157111627.1713959807221"

------=_Part_8609_157111627.1713959807221
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Deno vs. Bash for Pipeline Tasks</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Deno vs. Bash for Pipeline Tasks</h1>
    <div class=3D"Section1">
        <p>Nach einem Prototypen f=C3=BCr die Verwendung von Deno als Alter=
native zu Shell/Bash Script in Pipeline Tasks haben wir uns f=C3=BCr die Mi=
gration entschieden:</p>
<p><span class=3D"jira-issue resolved" data-jira-key=3D"ESTA-5573"> <a href=
=3D"https://flow.sbb.ch/browse/ESTA-5573" class=3D"jira-issue-key"><img cla=
ss=3D"icon" src=3D"https://flow.sbb.ch/images/icons/issuetypes/epic.svg">ES=
TA-5573</a> - <span class=3D"summary">ESTA Tekton: Deno Scripting</span> <s=
pan class=3D"aui-lozenge aui-lozenge-subtle             aui-lozenge-success
     jira-macro-single-issue-export-pdf">Closed</span> </span></p>
<p>Bei der Umsetzung sind allerdings einige Zweifel aufgekommen, ob dies de=
r richtige Weg ist und ob die Verwendung von Deno nicht doch eher den Code =
komplexer und schlechter lesbar macht.</p>
<h2 id=3D"Denovs.BashforPipelineTasks-WarumDeno?">Warum Deno?</h2>
<p><em>Developer Experience =E2=80=93 unsere Entwickler sind fundierter in =
Typescript als in Bash</em></p>
<h2 id=3D"Denovs.BashforPipelineTasks-Pros">Pros</h2>
<ul>
<li>Loops sind einfacher</li>
<li>if mit &amp;&amp; oder || sind einfacher</li>
<li>Einfachere JSON Verarbeitung</li>
<li>Modularisierung (Funktionen/Lib)</li>
<li>Testbarkeit</li>
</ul>
<h2 id=3D"Denovs.BashforPipelineTasks-Cons">Cons</h2>
<ul>
<li>Deno Runtime muss in allen Images f=C3=BCr Tekton Tasks installiert wer=
den</li>
<li>Shell Exec muss umst=C3=A4ndlich gewrapped werden</li>
<li>Quoting von Shell Argumenten (Values m=C3=BCssen z.T. gesplittet werden=
)<br><code>runCommand("helm", ["package", chartDir, ...helmArgs.split(" ")]=
</code></li>
<li>Keine Unterst=C3=BCtzung f=C3=BCr Pipes | und File-Redirects &gt;<br>
 Alternative: <a href=3D"https://stackoverflow.com/a/62088422" class=3D"ext=
ernal-link" rel=3D"nofollow">https://stackoverflow.com/a/62088422</a></li>
<li><code>source</code> Command nur sehr hackish umgesetzt/emuliert</li>
<li>Kein Streaming<br><code>cat &lt;large-file&gt;</code> vs. <code>console=
.log(await Deno.readTextFile(largeFilePath))</code></li>
<li>Shell Commands/Utilities sind meinst einfacher<br>
 z.B. File Upload: <code>curl -T &lt;filename&gt; &lt;url&gt;</code></li>
<li>Asynchronit=C3=A4t (await vergessen)</li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">Zielpublikum/Open Source: Build M=
anager sind meist n=C3=A4her bei Bash als bei Typescript</span></span></li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">Bashscript Beispiele f=C3=BCr Bas=
h Commands findet man sehr viele im Netz die man 1:1 lokal testen und r=C3=
=BCberkopieren kann. Mit Deno muss man die zuerst noch umformen oder escape=
n.&nbsp;</span></span></li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">1 Komplexit=C3=A4tslayer f=C3=BCr=
 Fehlerursachen mehr</span></span></li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">Modularisierung mit Funktionen ge=
ht auch mit Bash (Beispiel Tagging Pipeline)</span></span></li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">Bash Commands kann jedes Image vo=
m Netz, Deno nicht.&nbsp;</span></span></li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">Die Mehrheit der Commands sind Ba=
sh, Pipes usw. Ein kleiner Teil sind Kontrollstrukturen.</span></span></li>
<li><span><span class=3D"ui-provider a b c d e f g h i j k l m n o p q r s =
t u v w x y z ab ac ae af ag ah ai aj ak">Typisierung nervt manchmal. Macht=
 das Scripting umst=C3=A4ndlicher</span></span></li>
</ul>
    </div>
</body>
</html>
------=_Part_8609_157111627.1713959807221--
